#include <stdio.h>
#include <stdlib.h>

#define SIZE 10 // Define the size of the array

// Function to calculate the address for each element
int calculateAddress(int key, int maxValue, int size) {
    return (key * size) / (maxValue + 1);
}

// Function to implement Address Calculation Sort
void addressCalculationSort(int arr[], int size, int maxValue) {
    // Allocate memory for temporary storage (buckets)
    int **buckets = (int **)malloc(size * sizeof(int *));
    int *bucketSizes = (int *)calloc(size, sizeof(int));
    
    for (int i = 0; i < size; i++) {
        buckets[i] = (int *)malloc(size * sizeof(int)); // Allocate each bucket
    }

    // Place elements in buckets based on the address calculation
    for (int i = 0; i < size; i++) {
        int address = calculateAddress(arr[i], maxValue, size);
        buckets[address][bucketSizes[address]++] = arr[i];
    }

    // Sort individual buckets
    for (int i = 0; i < size; i++) {
        for (int j = 0; j < bucketSizes[i] - 1; j++) {
            for (int k = 0; k < bucketSizes[i] - j - 1; k++) {
                if (buckets[i][k] > buckets[i][k + 1]) {
                    int temp = buckets[i][k];
                    buckets[i][k] = buckets[i][k + 1];
                    buckets[i][k + 1] = temp;
                }
            }
        }
    }

    // Combine the sorted buckets into the original array
    int index = 0;
    for (int i = 0; i < size; i++) {
        for (int j = 0; j < bucketSizes[i]; j++) {
            arr[index++] = buckets[i][j];
        }
    }

    // Free allocated memory
    for (int i = 0; i < size; i++) {
        free(buckets[i]);
    }
    free(buckets);
    free(bucketSizes);
}

// Function to find the maximum value in an array
int findMax(int arr[], int size) {
    int max = arr[0];
    for (int i = 1; i < size; i++) {
        if (arr[i] > max) {
            max = arr[i];
        }
    }
    return max;
}

int main() {
    int arr[SIZE];
    int maxValue;

    // Take input from the user
    printf("Enter %d elements of the array:\n", SIZE);
    for (int i = 0; i < SIZE; i++) {
        scanf("%d", &arr[i]);
    }

    // Find the maximum value in the array
    maxValue = findMax(arr, SIZE);

    // Perform Address Calculation Sort
    addressCalculationSort(arr, SIZE, maxValue);

    // Print the sorted array
    printf("Sorted array:\n");
    for (int i = 0; i < SIZE; i++) {
        printf("%d ", arr[i]);
    }
    printf("\n");

    return 0;
}
