#include <stdio.h>
#include <stdlib.h>

#define MAX 5

// Function Declarations
void enqueue(int queue[], int *rear, int *front);
void dequeue(int queue[], int *rear, int *front);
void displayQueue(int queue[], int front, int rear);
void updateQueue(int queue[], int front);

void main()
{
    int queue[MAX], rearIndex = -1, frontIndex = -1;
    int *rear = &rearIndex, *front = &frontIndex;
    int choice;

    // Initialize queue
    for (int i = 0; i < MAX; i++)
    {
        queue[i] = 0;
    }

    while (1)
    {
        printf("\n----Circular Queue Operations----");
        printf("\n1. Enqueue");
        printf("\n2. Dequeue");
        printf("\n3. Update");
        printf("\n4. Display");
        printf("\n5. Exit");
        printf("\nEnter Your Choice: ");
        scanf("%d", &choice);

        switch (choice)
        {
            case 1:
                enqueue(queue, rear, front);
                break;
            case 2:
                dequeue(queue, rear, front);
                break;
            case 3:
                updateQueue(queue, *front);
                break;
            case 4:
                displayQueue(queue, *front, *rear);
                break;
            case 5:
                exit(0);
                break;
            default:
                printf("\nPlease Enter a Valid Choice!");
        }
    }
}

void enqueue(int queue[], int *rear, int *front)
{
    int element;
    int nextRear = (*rear + 1) % MAX;
    
    if (nextRear == *front)
    {
        printf("\nQueue is Full!");
    }
    else
    {
        printf("\nEnter New Value: ");
        scanf("%d", &element);

        if (*rear == -1 && *front == -1)
        {
            *rear = 0;
            *front = 0;
        }
        else
        {
            *rear = nextRear;
        }
        queue[*rear] = element;
    }
}

void dequeue(int queue[], int *rear, int *front)
{
    if (*front == -1)
    {
        printf("Queue is Empty!");
    }
    else
    {
        printf("\nRemoved Element: %d", queue[*front]);
        queue[*front] = 0;

        if (*front == *rear)
        {
            *front = -1;
            *rear = -1;
        }
        else
        {
            *front = (*front + 1) % MAX;
        }
    }
}

void displayQueue(int queue[], int front, int rear)
{
    int i;
    if (front == -1)
    {
        printf("\nQueue is Empty!");
    }
    else
    {
        printf("\nQueue: ");
        if (rear >= front)
        {
            for (i = front; i <= rear; i++)
            {
                printf(" %d ", queue[i]);
            }
        }
        else
        {
            for (i = front; i < MAX; i++)
            {
                printf(" %d ", queue[i]);
            }
            for (i = 0; i <= rear; i++)
            {
                printf(" %d ", queue[i]);
            }
        }
        printf("\n");
    }
}

void updateQueue(int queue[], int front)
{
    int element, newElement, found = 0;
    if (front == -1)
    {
        printf("\nQueue is Empty!");
    }
    else
    {
        printf("\nEnter Element to Update: ");
        scanf("%d", &element);
        for (int i = 0; i < MAX; i++)
        {
            if (queue[i] == element)
            {
                printf("\nEnter New Element: ");
                scanf("%d", &newElement);
                queue[i] = newElement;
                found = 1;
                printf("\nElement %d updated to %d.", element, newElement);
                break;
            }
        }

        if (!found)
        {
            printf("\nElement not found in the queue!");
        }
    }
}
