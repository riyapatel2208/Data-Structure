#include <stdio.h>
#include <stdlib.h>

// Node structure
typedef struct Node {
    int data;
    struct Node* next;
} Node;

Node* head = NULL;

// Function to insert a node
void insert() {
    int value;
    printf("Enter the value to insert: ");
    scanf("%d", &value);

    Node* newNode = (Node*)malloc(sizeof(Node));
    newNode->data = value;

    if (head == NULL) {
        head = newNode;
        newNode->next = head;
    } else {
        Node* temp = head;
        while (temp->next != head) {
            temp = temp->next;
        }
        temp->next = newNode;
        newNode->next = head;
    }
    printf("Node inserted successfully!\n");
}

// Function to delete a node
void delete() {
    if (head == NULL) {
        printf("List is empty. Nothing to delete.\n");
        return;
    }

    int value;
    printf("Enter the value to delete: ");
    scanf("%d", &value);

    Node* temp = head;
    Node* prev = NULL;

    do {
        if (temp->data == value) {
            if (temp == head && temp->next == head) { // Single node case
                head = NULL;
            } else if (temp == head) { // Deleting head node
                Node* last = head;
                while (last->next != head) {
                    last = last->next;
                }
                head = head->next;
                last->next = head;
            } else { // Deleting other nodes
                prev->next = temp->next;
            }
            free(temp);
            printf("Node deleted successfully!\n");
            return;
        }
        prev = temp;
        temp = temp->next;
    } while (temp != head);

    printf("Node with value %d not found.\n", value);
}

// Function to modify a node
void modify() {
    if (head == NULL) {
        printf("List is empty. Nothing to modify.\n");
        return;
    }

    int oldValue, newValue;
    printf("Enter the value to modify: ");
    scanf("%d", &oldValue);
    printf("Enter the new value: ");
    scanf("%d", &newValue);

    Node* temp = head;
    do {
        if (temp->data == oldValue) {
            temp->data = newValue;
            printf("Node modified successfully!\n");
            return;
        }
        temp = temp->next;
    } while (temp != head);

    printf("Node with value %d not found.\n", oldValue);
}

// Function to display the list
void display() {
    if (head == NULL) {
        printf("List is empty.\n");
        return;
    }

    Node* temp = head;
    printf("Singly Circular Linked List: ");
    do {
        printf("%d -> ", temp->data);
        temp = temp->next;
    } while (temp != head);
    printf("(head)\n");
}

// Main function
int main() {
    int choice;
    while (1) {
        printf("\nMenu:\n");
        printf("1. Insert\n");
        printf("2. Delete\n");
        printf("3. Modify\n");
        printf("4. Display\n");
        printf("5. Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);

        switch (choice) {
            case 1:
                insert();
                break;
            case 2:
                delete();
                break;
            case 3:
                modify();
                break;
            case 4:
                display();
                break;
            case 5:
                printf("Exiting...\n");
                exit(0);
            default:
                printf("Invalid choice. Please try again.\n");
        }
    }
    return 0;
}
